<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Legal AI - Document Analysis</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f8fafc; }
        .page { display: none; }
        .page.active { display: block; animation: fadeIn 0.5s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        
        .legal-term { cursor: pointer; background-color: #e0f2fe; color: #0c4a6e; padding: 2px 6px; border-radius: 4px; font-weight: 500; transition: all 0.2s ease-in-out; }
        .legal-term:hover { background-color: #bae6fd; }

        .chatbot-container { position: fixed; bottom: 24px; right: 24px; width: 380px; height: 500px; display: flex; flex-direction: column; background-color: #ffffff; border-radius: 1rem; box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1); overflow: hidden; transform: scale(0.95) translateY(10px) translateX(10px); opacity: 0; transform-origin: bottom right; transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275); z-index: 1000; pointer-events: none; }
        .chatbot-container.active { transform: scale(1) translateY(0) translateX(0); opacity: 1; pointer-events: all; }
        .chat-messages { flex-grow: 1; padding: 1rem; overflow-y: auto; display: flex; flex-direction: column; gap: 0.75rem; }
        .message { max-width: 80%; padding: 0.75rem 1rem; border-radius: 1.2rem; line-height: 1.4; font-size: 0.9rem; }
        .user-message { background-color: #e2f0ff; color: #1e3a8a; align-self: flex-end; border-bottom-right-radius: 0.4rem; }
        .bot-message { background-color: #f1f5f9; color: #374151; align-self: flex-start; border-bottom-left-radius: 0.4rem; }
        .loading-dots span { display: inline-block; width: 8px; height: 8px; background-color: #9ca3af; border-radius: 50%; animation: bounce 1s infinite ease-in-out; }
        .loading-dots span:nth-child(1) { animation-delay: -0.32s; }
        .loading-dots span:nth-child(2) { animation-delay: -0.16s; }
        @keyframes bounce { 0%, 80%, 100% { transform: scale(0); } 40% { transform: scale(1); } }
    </style>
</head>
<body class="text-gray-800">

    <!-- Header (Consistent across pages) -->
    <header class="bg-white/80 backdrop-blur-lg border-b border-gray-200 sticky top-0 z-20">
        <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                 <div class="flex-shrink-0 flex items-center gap-2 cursor-pointer" onclick="navigateTo('home-page')">
                    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-600"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><path d="M12 18v-6"></path><path d="M9 15h6"></path></svg>
                    <span class="text-2xl font-bold text-gray-900">Legal AI</span>
                </div>
            </div>
        </nav>
    </header>

    <!-- Page 1: Home Page -->
    <main id="home-page" class="page active">
        <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-24 text-center">
            <h1 class="text-4xl md:text-6xl font-extrabold text-gray-900 tracking-tight">Demystify Legal Documents in Seconds.</h1>
            <p class="mt-6 text-lg text-gray-600 max-w-2xl mx-auto">Stop guessing, start understanding. Legal AI uses artificial intelligence to translate complex contracts and agreements into simple, actionable insights.</p>
            <button onclick="navigateTo('upload-page')" class="mt-10 bg-blue-600 text-white font-semibold py-4 px-8 rounded-lg hover:bg-blue-700 transition-all text-lg shadow-md hover:shadow-lg">Get Started</button>
        </div>
    </main>

    <!-- Page 2: Upload Page -->
    <main id="upload-page" class="page">
         <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
            <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200 space-y-6">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900 mb-2">Analyze Your Document</h1>
                    <p class="text-gray-500">Provide your API key, then paste or upload your document to begin.</p>
                </div>
                <div id="upload-error-section" class="hidden bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-md">
                    <p class="font-bold">Analysis Failed</p>
                    <p id="upload-error-message"></p>
                </div>
                <div>
                    <label for="api-key-input" class="block text-sm font-medium text-gray-700 mb-1">Google AI API Key</label>
                    <input type="password" id="api-key-input" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="Enter your API key here">
                </div>
                
                <!-- NEW BLUE BOX UI -->
                <div class="bg-blue-600 text-white p-8 rounded-2xl text-center space-y-4">
                    <h2 class="text-3xl font-bold">Start Your Analysis</h2>
                    <p class="text-blue-100 max-w-md mx-auto">Upload your contract, agreement, or terms of service. Our AI will provide a simple summary and risk analysis in moments.</p>
                    <input type="file" id="file-upload" class="hidden" accept=".txt">
                    <label for="file-upload" class="bg-white text-blue-600 font-semibold py-3 px-6 rounded-lg hover:bg-blue-50 transition-all inline-flex items-center gap-2 cursor-pointer shadow-md">
                        <span>Upload Document</span>
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-upload"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" y1="3" x2="12" y2="15"/></svg>
                    </label>
                </div>

                <div>
                    <label for="document-input" class="block text-sm font-medium text-gray-700 mb-1">Document Text (or Paste Here)</label>
                    <textarea id="document-input" class="w-full h-48 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="Your uploaded file content will appear here, or you can paste your text directly."></textarea>
                </div>
                <button id="analyze-button" class="w-full bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-700 transition-all flex items-center justify-center gap-2 disabled:bg-gray-400" disabled>Analyze Document</button>
            </div>
        </div>
    </main>
    
    <!-- Page 3: Analyzing Page -->
    <main id="analyzing-page" class="page">
        <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-32 text-center">
             <div class="flex justify-center items-center mb-6">
                 <div class="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
             </div>
            <h1 class="text-3xl font-bold text-gray-900">Analyzing Your Document...</h1>
            <p class="mt-4 text-lg text-gray-600">Our AI is reading, summarizing, and identifying key risks. This may take a moment.</p>
        </div>
    </main>
    
    <!-- Page 4: Dashboard Page -->
    <main id="dashboard-page" class="page">
        <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <div class="space-y-8">
                <!-- Summary -->
                <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
                    <h2 class="text-2xl font-bold text-gray-900 mb-4">Plain Language Summary</h2>
                    <div id="summary-content" class="prose max-w-none text-gray-700 leading-relaxed whitespace-pre-line"></div>
                </div>
                
                <!-- Clickable Cards -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div onclick="navigateTo('risk-analysis-page')" class="bg-white p-6 rounded-2xl shadow-lg border border-gray-200 cursor-pointer hover:shadow-xl hover:border-blue-500 transition-all">
                        <h3 class="text-xl font-semibold mb-2">Risk Analysis</h3>
                        <p id="risk-verdict-summary" class="font-semibold"></p>
                        <p class="text-sm text-blue-600 mt-2 font-semibold">View details &rarr;</p>
                    </div>
                    <div onclick="navigateTo('key-terms-page')" class="bg-white p-6 rounded-2xl shadow-lg border border-gray-200 cursor-pointer hover:shadow-xl hover:border-blue-500 transition-all">
                        <h3 class="text-xl font-semibold mb-2">Key Terms Explained</h3>
                        <p id="key-terms-count" class="text-gray-600"></p>
                        <p class="text-sm text-blue-600 mt-2 font-semibold">View glossary &rarr;</p>
                    </div>
                     <div onclick="navigateTo('comprehension-check-page')" class="bg-white p-6 rounded-2xl shadow-lg border border-gray-200 cursor-pointer hover:shadow-xl hover:border-blue-500 transition-all">
                        <h3 class="text-xl font-semibold mb-2">Understanding Check</h3>
                        <p class="text-gray-600">Test your knowledge.</p>
                        <p class="text-sm text-blue-600 mt-2 font-semibold">Start quiz &rarr;</p>
                    </div>
                </div>

                <!-- Recommendations -->
                 <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
                    <h2 class="text-2xl font-bold text-gray-900 mb-4">Actionable Recommendations</h2>
                    <ul id="recommendations-list" class="list-disc list-inside space-y-2 text-gray-700"></ul>
                </div>
            </div>
        </div>
    </main>

    <!-- Page 5: Risk Analysis Page -->
    <div id="risk-analysis-page" class="page max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
            <button onclick="navigateTo('dashboard-page')" class="back-button mb-6 text-blue-600 hover:underline font-semibold">&larr; Back to Dashboard</button>
            <h1 class="text-3xl font-bold mb-6">Detailed Risk Analysis</h1>
            <div id="risk-details-content" class="space-y-4"></div>
        </div>
    </div>

    <!-- Page 6: Comprehension Check Page -->
    <div id="comprehension-check-page" class="page max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
         <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
            <button onclick="navigateTo('dashboard-page')" class="back-button mb-6 text-blue-600 hover:underline font-semibold">&larr; Back to Dashboard</button>
            <h1 class="text-3xl font-bold mb-6">Check Your Understanding</h1>
            <div id="comprehension-quiz-content" class="space-y-6"></div>
        </div>
    </div>
    
    <!-- Page 7: Key Terms Page -->
    <div id="key-terms-page" class="page max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
         <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
            <button onclick="navigateTo('dashboard-page')" class="back-button mb-6 text-blue-600 hover:underline font-semibold">&larr; Back to Dashboard</button>
            <h1 class="text-3xl font-bold mb-6">Key Terms Explained</h1>
            <div id="key-terms-content" class="space-y-4"></div>
        </div>
    </div>

    <!-- Page 8: Chatbot -->
    <button id="toggleChatBtn" class="fixed bottom-6 right-6 p-4 rounded-full shadow-lg bg-blue-600 hover:bg-blue-700 z-[1001]">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" class="w-6 h-6"><path d="M4.925 15.659c-.465-.465-.465-1.218 0-1.683L14.07 4.832a1.875 1.875 0 012.651 0l.4.401c.465.465.465 1.218 0 1.682l-9.145 9.146a1.2 1.2 0 01-.849.351h-.008a1.2 1.2 0 01-.85-.351z" /><path fill-rule="evenodd" d="M11.375 21.056l.944-.943a49.638 49.638 0 00-.986-5.596L7.15 18.163a2.5 2.5 0 01-1.424-.443l-.956-.478a.75.75 0 00-.919.234l-2.454 3.067a.75.75 0 00-.294.597v.001c-.007.26.044.52.17.757.126.238.332.427.585.544a6.042 6.042 0 001.328.498 44.555 44.555 0 007.828 0 6.04 6.04 0 001.328-.498.75.75 0 00.585-.544c.126-.237.177-.497.17-.757v-.001a.75.75 0 00-.294-.597l-2.454-3.067a.75.75 0 00-.919-.234l-.956.478a2.5 2.5 0 01-1.424.443L11.375 21.056z" clip-rule="evenodd" /></svg>
    </button>
    <div id="chatbotContainer" class="chatbot-container">
        <div class="p-4 bg-blue-600 text-white flex items-center justify-between">
            <h2 class="text-xl font-semibold">AI Legal Assistant</h2>
            <button id="closeChatBtn" class="p-1 rounded-full hover:bg-blue-700"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg></button>
        </div>
        <div id="chatMessages" class="chat-messages"><div class="message bot-message">Hello! After you analyze a document, you can ask me to explain any highlighted legal terms.</div></div>
        <form id="chatForm" class="p-4 bg-gray-50 flex items-center border-t">
            <input type="text" id="chatInput" class="flex-grow p-3 border rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Ask about a legal term...">
            <button type="submit" class="ml-2 p-3 bg-blue-600 text-white rounded-full hover:bg-blue-700"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5"><path d="M3.478 2.405a.75.75 0 00-.926.94l2.432 7.905H13.5a.75.75 0 010 1.5H4.984l-2.432 7.905a.75.75 0 00.926.94 60.52 60.52 0 0018.445-8.986.75.75 0 000-1.218A60.52 60.52 0 003.478 2.405z" /></svg></button>
        </form>
    </div>

    <script>
        let analysisData = null;
        const pages = document.querySelectorAll('.page');
        const apiKeyInput = document.getElementById('api-key-input');
        const analyzeButton = document.getElementById('analyze-button');
        const documentInput = document.getElementById('document-input');
        const fileUpload = document.getElementById('file-upload');
        
        // --- Navigation ---
        function navigateTo(pageId) {
            pages.forEach(page => page.classList.toggle('active', page.id === pageId));
            window.scrollTo(0, 0);
        }

        // --- API Call ---
        async function callGeminiAPI(apiKey, payload) {
            const API_URL = https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey};
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            if (!response.ok) {
                const errorBody = await response.json();
                throw new Error(API Error (${response.status}): ${errorBody.error.message});
            }
            return await response.json();
        }

        // --- Main Analysis Logic ---
        async function handleAnalyze() {
            const apiKey = apiKeyInput.value.trim();
            const documentText = documentInput.value.trim();
            if (!apiKey || !documentText) {
                alert("Please provide both an API key and a document.");
                return;
            }

            navigateTo('analyzing-page');
            document.getElementById('upload-error-section').classList.add('hidden');

            const systemPrompt = You are "Legal AI," an expert legal analyst. Your task is to demystify a legal document for a non-technical user. Return a structured JSON object. The summary should be written in simple, clear language. Mark legal terms for highlighting by wrapping them in double angle brackets, like <<Term>>.;
            const payload = {
                contents: [{ parts: [{ text: Document:\n\n${documentText} }] }],
                systemInstruction: { parts: [{ text: systemPrompt }] },
                generationConfig: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "OBJECT",
                        properties: {
                            "summary": { "type": "STRING" },
                            "legalTerms": { "type": "ARRAY", "items": { "type": "OBJECT", "properties": { "term": { "type": "STRING" }, "explanation": { "type": "STRING" } } } },
                            "riskAnalysis": { "type": "OBJECT", "properties": { "verdict": { "type": "STRING" }, "flags": { "type": "ARRAY", "items": { "type": "OBJECT", "properties": { "type": { "type": "STRING" }, "description": { "type": "STRING" } } } } } },
                            "recommendations": { "type": "ARRAY", "items": { "type": "STRING" } },
                            "comprehensionCheck": { "type": "ARRAY", "items": { "type": "OBJECT", "properties": { "question": { "type": "STRING" }, "options": { "type": "ARRAY", "items": { "type": "STRING" } }, "correctAnswer": { "type": "STRING" } } } }
                        }
                    }
                }
            };

            try {
                const result = await callGeminiAPI(apiKey, payload);
                const candidate = result.candidates?.[0];
                if (candidate && candidate.content?.parts?.[0]?.text) {
                    analysisData = JSON.parse(candidate.content.parts[0].text);
                    renderAllPages();
                    navigateTo('dashboard-page');
                } else {
                    throw new Error("The AI returned an empty or invalid response.");
                }
            } catch (error) {
                document.getElementById('upload-error-message').textContent = error.message;
                document.getElementById('upload-error-section').classList.remove('hidden');
                navigateTo('upload-page');
            }
        }
        
        // --- RENDER FUNCTIONS ---
        function renderAllPages() {
            renderDashboard();
            renderRiskDetails();
            renderKeyTerms();
            renderComprehensionQuiz();
        }

        function renderDashboard() {
            document.getElementById('summary-content').innerHTML = analysisData.summary.replace(/<<(.+?)>>/g, <span class="legal-term" data-term="$1">$1</span>);
            document.getElementById('risk-verdict-summary').textContent = analysisData.riskAnalysis.verdict;
            document.getElementById('key-terms-count').textContent = ${analysisData.legalTerms.length} terms identified.;
            document.getElementById('recommendations-list').innerHTML = analysisData.recommendations.map(r => <li>${r}</li>).join('');
            
            document.querySelectorAll('.legal-term').forEach(termEl => {
                termEl.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const term = e.target.dataset.term;
                    document.getElementById('chatbotContainer').classList.add('active');
                    chatInput.value = What does "${term}" mean?;
                    chatForm.dispatchEvent(new Event('submit'));
                });
            });
        }
        
        function renderRiskDetails() {
            const contentEl = document.getElementById('risk-details-content');
            const { verdict, flags } = analysisData.riskAnalysis;
            const flagHtml = flags.map(flag => `
                <div class="p-4 rounded-lg bg-gray-50 border">
                    <p class="font-semibold text-lg">${flag.type}</p>
                    <p class="text-gray-700 mt-1">${flag.description}</p>
                </div>`).join('');
            contentEl.innerHTML = `
                <div><h2 class="text-2xl font-bold mb-2">Overall Verdict: <span class="text-blue-600">${verdict}</span></h2></div>
                <div class="space-y-4">${flagHtml}</div>`;
        }

        function renderKeyTerms() {
            const contentEl = document.getElementById('key-terms-content');
            contentEl.innerHTML = analysisData.legalTerms.map(term => `
                <div class="p-4 rounded-lg bg-gray-50 border">
                    <p class="font-semibold text-lg">${term.term}</p>
                    <p class="text-gray-700 mt-1">${term.explanation}</p>
                </div>`).join('');
        }

        function renderComprehensionQuiz() {
            const contentEl = document.getElementById('comprehension-quiz-content');
            contentEl.innerHTML = '';
            analysisData.comprehensionCheck.forEach((item, index) => {
                const qDiv = document.createElement('div');
                qDiv.innerHTML = <p class="font-semibold mb-3 text-lg">Q${index + 1}: ${item.question}</p>;
                const optionsDiv = document.createElement('div');
                optionsDiv.className = 'space-y-2';
                
                item.options.forEach(option => {
                    const optionBtn = document.createElement('button');
                    optionBtn.textContent = option;
                    optionBtn.className = 'w-full text-left p-3 rounded-md border border-gray-300 hover:bg-gray-100 transition-colors';
                    optionBtn.addEventListener('click', () => {
                        optionsDiv.querySelectorAll('button').forEach(btn => btn.disabled = true);
                        if (option === item.correctAnswer) {
                            optionBtn.className += ' bg-green-100 border-green-500 text-green-800 font-semibold';
                        } else {
                            optionBtn.className += ' bg-red-100 border-red-500 text-red-800';
                            [...optionsDiv.children].find(btn => btn.textContent === item.correctAnswer)?.classList.add('bg-green-100', 'border-green-500', 'text-green-800', 'font-semibold');
                        }
                    });
                    optionsDiv.appendChild(optionBtn);
                });
                qDiv.appendChild(optionsDiv);
                contentEl.appendChild(qDiv);
            });
        }
        
        // --- Event Listeners ---
        apiKeyInput.addEventListener('input', () => {
            analyzeButton.disabled = apiKeyInput.value.trim() === '';
        });
        analyzeButton.addEventListener('click', handleAnalyze);

        fileUpload.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (!file) return;
            if (!file.name.endsWith('.txt')) {
                alert('Only .txt files are supported at this time.');
                return;
            }
            const reader = new FileReader();
            reader.onload = (e) => {
                documentInput.value = e.target.result;
            };
            reader.readAsText(file);
        });
        
        // --- Chatbot Logic ---
        const chatbotContainer = document.getElementById('chatbotContainer');
        const toggleChatBtn = document.getElementById('toggleChatBtn');
        const closeChatBtn = document.getElementById('closeChatBtn');
        const chatForm = document.getElementById('chatForm');
        const chatInput = document.getElementById('chatInput');
        const chatMessages = document.getElementById('chatMessages');

        toggleChatBtn.addEventListener('click', () => chatbotContainer.classList.add('active'));
        closeChatBtn.addEventListener('click', () => chatbotContainer.classList.remove('active'));

        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const userMessage = chatInput.value.trim();
            if (!userMessage) return;

            addChatMessage(userMessage, 'user');
            chatInput.value = '';
            showTypingIndicator();

            setTimeout(() => {
                let botResponse = "I can only provide definitions for the legal terms identified in the document you analyzed. Please ask about one of those terms.";
                if (analysisData && analysisData.legalTerms) {
                    const requestedTerm = analysisData.legalTerms.find(term => userMessage.toLowerCase().includes(term.term.toLowerCase()));
                    if (requestedTerm) {
                        botResponse = requestedTerm.explanation;
                    }
                }
                hideTypingIndicator();
                addChatMessage(botResponse, 'bot');
            }, 1500);
        });
        
        function addChatMessage(text, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.className = message ${sender}-message;
            messageDiv.textContent = text;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function showTypingIndicator() {
            const typingIndicator = document.createElement('div');
            typingIndicator.id = 'typingIndicator';
            typingIndicator.className = 'message bot-message loading-dots';
            typingIndicator.innerHTML = <span></span><span></span><span></span>;
            chatMessages.appendChild(typingIndicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator')?.remove();
        }

    </script>
</body>
</html>